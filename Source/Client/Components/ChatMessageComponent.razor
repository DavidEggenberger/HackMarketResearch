@using Client.BuildingBlocks.Http
@using Client.BuildingBlocks.Modals
@using Shared
@if (ChatMessage.IsSystem)
{
    <div class="mt-2 flex w-full justify-end text-xs">
        <div class="p-1 border-orange bg-white rounded border">
            <div>
                @ChatMessage.Text
            </div>
            @if(ChatMessage.MarketProposals.Any())
            {
                <div class="flex flex-row gap-x-2 pt-2">
                    @foreach (var market in ChatMessage.MarketProposals)
                    {
                        <div @onclick="async() => await SelectMarketAsync(market)" class="rounded hover:border-orange cursor-pointer p-0.5 border border-gray-300 text-xs">
                            <h5>@market.Name</h5>
                        </div>
                    }
                </div>
            }
            @if (ChatMessage.VideoProposals.Any())
            {
                <div class="flex flex-row gap-x-2 pt-2">
                    @foreach (var video in ChatMessage.VideoProposals.Take(4))
                    {
                        <div @onclick="async() => await OpenCreateVideoAnalysisModalAsync(video)" class="rounded hover:border-orange cursor-pointer p-0.5 border border-gray-300 text-xs">
                            <h5>@(video.Title.Length > 50 ? $"{video.Title.Substring(0, 50)}..." : video.Title)</h5>
                        </div>
                    }
                </div>
            }
            <div class="flex justify-end">
                <h3 class="text-semibold text-orange text-xs">Rahel rocket🚀</h3>
            </div>
        </div>
    </div>
}
else
{
    <div class="mt-2 flex w-full justify-start text-xs">
        <div class="p-1 border-grey-300 bg-white rounded border">
            @ChatMessage.Text
        </div>

    </div>
}


@code {
    [Parameter]
    public MarketResearchDTO MarketResearch { get; set; }

    [Parameter]
    public ChatMessageDTO ChatMessage { get; set; }

    [Inject]
    public HttpClientService HttpClientService { get; set; }
    
    [Inject]
    public IModalService modalService { get; set; }

    private IModalReference modalReference;

    private async Task SelectMarketAsync(MarketProposalDTO market)
    {
        await HttpClientService.PostToAPIAsync(EndpointConstants.MarketResearchEndpoint + $"/{MarketResearch.Id}/YouTubeSearch", market);
    }

    private async Task OpenCreateVideoAnalysisModalAsync(VideoProposalDTO videoProposal)
    {
        var parameters = new ModalParameters
        {
            { nameof(VideoOverviewModal.ModalExitedCallback), new EventCallback(this, async () => { modalReference.Close(); })},
            { nameof(VideoOverviewModal.VideoProposal), videoProposal },
            { nameof(VideoOverviewModal.MarketResearch), MarketResearch },
        };

        modalReference = modalService.Show<VideoOverviewModal>(string.Empty, parameters, DefaultModalOptions.DefaultModal);
    }
}
