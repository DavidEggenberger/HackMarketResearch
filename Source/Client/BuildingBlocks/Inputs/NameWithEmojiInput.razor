@inherits InputBase<string>


<div>
    <label for="EmojiInput" class="text-gray-900 text-md block font-medium">Icon (optional) and name</label>

    <div class="text-md border-gray-300 bg-gray-50 flex flex-row rounded border focus-within:ring-primary-500 focus-within:border-primary-500 hover:bg-gray-100">
        <div class="bg-gray-50 pr-1 border-gray-500 flex min-w-[50px] cursor-pointer flex-row rounded rounded-r-none border-r hover:bg-gray-100" @onclick="async () => await ShowEmojiModalAsync()">
            @if (string.IsNullOrEmpty(selectedEmojii) == false)
            {
                <div class="text-gray-900 text-md block rounded font-medium outline-none">
                    <div class="flex flex-row">
                        <div class="text-2xl">@selectedEmojii</div>
                    </div>
                </div>
            }          
            <div class="rotate-[-90deg] ml-auto grid place-content-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 fill-gray-500 ml-auto cursor-pointer" viewBox="0 0 24 24"><path d="m9.55 12l7.35 7.35q.375.375.363.875t-.388.875t-.875.375t-.875-.375l-7.7-7.675q-.3-.3-.45-.675t-.15-.75t.15-.75t.45-.675l7.7-7.7q.375-.375.888-.363t.887.388t.375.875t-.375.875z" /></svg>
            </div>            
        </div>
        <input @bind="@CurrentValue"
               @oninput="EventCallback.Factory.CreateBinder<string>(this, __value => CurrentValueAsString = __value, CurrentValueAsString)"
               type="text"
               name="@Label"
               id="@Label"
               class="text-gray-900 flex-1 pl-2 p-1 outline-none rounded bg-gray-50 hover:bg-gray-100"
               placeholder="@PlaceHolder"
               required="Field is required"
               autocomplete="off"
               autocorrect="off"
               autocapitalize="off"
               spellcheck="false" />
    </div>

    <div class="gap-x-1.5 flex min-h-[18px] flex-row items-center">
        @if (!string.IsNullOrEmpty(originalValue) && CurrentValue != originalValue && EditContext.IsValid(EditContext.Field(Label)))
        {
            <span class="text-xs">
                Original value: @originalValue
            </span>
            <img @onclick="RevertToOriginalValue" class="h-2.5 cursor-pointer" src="/icons/app/undo.png" />
        }
        else
        {
            <ValidationMessage For="@ValidationFor"></ValidationMessage>
        }
    </div>
</div>