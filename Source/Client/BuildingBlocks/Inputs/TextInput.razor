@inherits InputBase<string>﻿

<div>
    <div class="mb-1.5 gap-x-1 flex flex-row items-center">
        <label for="@Label" class="text-gray-900 text-md block font-medium">@Label</label>
        @if (string.IsNullOrEmpty(Tooltip) is false)
        {
            <div class='has-tooltip'>
                <span class='tooltip -mt-8 max-w-48 bg-gray-200 p-1 rounded'>@Tooltip</span>

                <img src="/icons/app/info.png" class="mb-0.5 h-4 cursor-pointer"/>
            </div>
        }
    </div>

    <input 
           @bind="@CurrentValue"
           @oninput="EventCallback.Factory.CreateBinder<string>(this, __value => CurrentValueAsString = __value, CurrentValueAsString)"
           type="text"
           name="@Label"
           id="@Label"
           class="text-gray-900 w-full hover:bg-gray-100 rounded border border-gray-300 bg-gray-50 p-1 text-md outline-none focus:ring-primary-500 focus:border-primary-500"
           placeholder="@PlaceHolder"
           required="Field is required"
           autocomplete="off" 
           autocorrect="off" 
           autocapitalize="off" 
           spellcheck="false">
           
    <div class="gap-x-1.5 flex min-h-[18px] flex-row items-center">
        @if (!string.IsNullOrEmpty(originalValue) && CurrentValue != originalValue && EditContext.IsValid(EditContext.Field(Label)))
        {
            <span class="text-xs">
                Original value: @originalValue
            </span>
            <img @onclick="RevertToOriginalValue" class="h-2.5 cursor-pointer" src="/icons/app/undo.png" />
        }
        else
        {
            <ValidationMessage For="@ValidationFor"></ValidationMessage>
        }
    </div>
</div>